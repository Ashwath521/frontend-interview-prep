
CSS Combinators
A combinator is something that explains the relationship between the selectors

A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.

There are four different combinators in CSS:

descendant selector (space)
child selector (>)
adjacent sibling selector (+)
general sibling selector (~)


Child Selector (>)
The child selector selects all elements that are the children of a specified element.
Note:- ðŸš¨ heiglight all P elements
  <div>
        <p>Welcome R15 v4</p>
        <p>Welcome R15 v4</p>
        <span>
            <p>Welcome R15 v4</p>
        </span>
    </div>

The following example selects all <p> elements that are children of a <div> element:
Note:- ðŸš¨ heiglight child p elements elements inside span tag it will not colors
  <div>
        <p>Welcome R15 v4</p>
        <p>Welcome R15 v4</p>
        <span>
            <p>Welcome R15 v4</p>
        </span>
    </div>


Adjacent Sibling Selector (+)
The adjacent sibling selector is used to select an element that is directly after another specific element.
Sibling elements must have the same parent element, and "adjacent" means "immediately following".
The following example selects the first <p> element that are placed immediately after <div> elements:
Note:- ðŸš¨ heighlight after div p elemnt here 3 and 7 th colored

    <div>
        <p>Paragraph 1 in the div.</p>
        <p>Paragraph 2 in the div.</p>
    </div>

    <p>Paragraph 3. After a div.</p>
    <p>Paragraph 4. After a div.</p>

    <div>
        <p>Paragraph 5 in the div.</p>
        <p>Paragraph 6 in the div.</p>
    </div>

    <p>Paragraph 7. After a div.</p>
    <p>Paragraph 8. After a div.</p>


All CSS Combinator Selectors
Selector	Example	Example description
element element	div p	Selects all <p> elements inside <div> elements
element>element	div > p	Selects all <p> elements where the parent is a <div> element
element+element	div + p	Selects the first <p> element that are placed immediately after <div> elements
element1~element2	p ~ ul	Selects every <ul> element that are preceded by a <p> element

CSS Pseudo-classes


What are Pseudo-classes?
A pseudo-class is used to define a special state of an element.

For example, it can be used to:

Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus

Syntax
The syntax of pseudo-classes:
selector:pseudo-class {
  property: value;
}
div:hover {
  background-color: Tomato;
  cursor: pointer;
  color: white;
  font-family: sans-serif;
  font-size: 14px;
}

Anchor Pseudo-classes
Links can be displayed in different ways:
a:link {
  color: #FF0000;
}

/* visited link */
a:visited {
  color: #00FF00;
}

/* mouse over link */
a:hover {
  color: #FF00FF;
}

/* selected link */
a:active {
  color: #0000FF;
}


Simple Tooltip Hover
Hover over a <div> element to show a <p> element (like a tooltip):
p {
  display: none;
  background-color: yellow;
  padding: 20px;
}

div:hover p {
  display: block;
}


All CSS Pseudo Classes
Selector	Example	Example description
:active	a:active	Selects the active link
:checked	input:checked	Selects every checked <input> element
:disabled	input:disabled	Selects every disabled <input> element
:empty	p:empty	Selects every <p> element that has no children
:enabled	input:enabled	Selects every enabled <input> element
:first-child	p:first-child	Selects every <p> elements that is the first child of its parent
:first-of-type	p:first-of-type	Selects every <p> element that is the first <p> element of its parent
:focus	input:focus	Selects the <input> element that has focus
:hover	a:hover	Selects links on mouse over
:in-range	input:in-range	Selects <input> elements with a value within a specified range
:invalid	input:invalid	Selects all <input> elements with an invalid value
:lang(language)	p:lang(it)	Selects every <p> element with a lang attribute value starting with "it"
:last-child	p:last-child	Selects every <p> elements that is the last child of its parent
:last-of-type	p:last-of-type	Selects every <p> element that is the last <p> element of its parent
:link	a:link	Selects all unvisited links
:not(selector)	:not(p)	Selects every element that is not a <p> element
:nth-child(n)	p:nth-child(2)	Selects every <p> element that is the second child of its parent
:nth-last-child(n)	p:nth-last-child(2)	Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)	p:nth-last-of-type(2)	Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type(n)	p:nth-of-type(2)	Selects every <p> element that is the second <p> element of its parent
:only-of-type	p:only-of-type	Selects every <p> element that is the only <p> element of its parent
:only-child	p:only-child	Selects every <p> element that is the only child of its parent
:optional	input:optional	Selects <input> elements with no "required" attribute
:out-of-range	input:out-of-range	Selects <input> elements with a value outside a specified range
:read-only	input:read-only	Selects <input> elements with a "readonly" attribute specified
:read-write	input:read-write	Selects <input> elements with no "readonly" attribute
:required	input:required	Selects <input> elements with a "required" attribute specified
:root	root	Selects the document's root element
:target	#news:target	Selects the current active #news element (clicked on a URL containing that anchor name)
:valid	input:valid	Selects all <input> elements with a valid value
:visited	a:visited	Selects all visited links

CSS - The :first-child Pseudo-class
The :first-child pseudo-class matches a specified element that is the first child of another element.
div p:first-child {
  background-color: yellow;
}


div p:last-child {
  background-color: yellow;
}

div p:nth-child(3) {
  background-color: yellow;
}


CSS Pseudo-elements

What are Pseudo-Elements?
A CSS pseudo-element is used to style specified parts of an element.

For example, it can be used to:

Style the first letter, or line, of an element
Insert content before, or after, the content of an element

Syntax
The syntax of pseudo-elements:

selector::pseudo-element {
  property: value;
}

Note: The ::first-line pseudo-element can only be applied to block-level elements.

The following properties apply to the ::first-line pseudo-element:

font properties
color properties
background properties
word-spacing
letter-spacing
text-decoration
vertical-align
text-transform
line-height
clear

The ::first-line Pseudo-element
The ::first-line pseudo-element is used to add a special style to the first line of a text.
p::first-line {
  color: red;
}


The ::first-letter Pseudo-element
The ::first-letter pseudo-element is used to add a special style to the first letter of a text.

p::first-letter {
  color: Tomato;
}


Pseudo-elements and HTML Classes
p.intro::first-letter {
  color: #ff0000;
  font-size: 200%;
}


CSS - The ::before Pseudo-element
The ::before pseudo-element can be used to insert some content before the content of an element.

CSS - The ::after Pseudo-element
The ::after pseudo-element can be used to insert some content after the content of an element


p::before {
  content: "acchu";
}

p::after {
  content: "acchu";
}



All CSS Pseudo Elements
Selector	Example	Example description
::after	p::after	Insert something after the content of each <p> element
::before	p::before	Insert something before the content of each <p> element
::first-letter	p::first-letter	Selects the first letter of each <p> element
::first-line	p::first-line	Selects the first line of each <p> element
::marker	::marker	Selects the markers of list items
::selection	p::selection	Selects the portion of an element that is selected by a user


CSS Attribute Selectors

Style HTML Elements With Specific Attributes
It is possible to style HTML elements that have specific attributes or attribute values.

CSS [attribute] Selector
The [attribute] selector is used to select elements with a specified attribute.

a[target] {
  background-color: yellow;
}


CSS [attribute="value"] Selector
The [attribute="value"] selector is used to select elements with a specified attribute and value.

a[target="_blank"] {
  color: Tomato;
}


CSS [attribute~="value"] Selector
The [attribute~="value"] selector is used to select elements with an attribute value containing a specified word.

The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":

[title~="flower"] {
  border: 5px solid yellow;
}

[alt~="nothing"] {
  color: red;
}


CSS [attribute|="value"] Selector
The [attribute|="value"] selector is used to select elements with the specified attribute, whose value can be exactly the specified value, or the specified value followed by a hyphen (-).

Note: The value has to be a whole word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text".

[class|="top"] {
  background: yellow;
}


CSS [attribute^="value"] Selector
The [attribute^="value"] selector is used to select elements with the specified attribute, whose value starts with the specified value.

The following example selects all elements with a class attribute value that starts with "top":

Note: The value does not have to be a whole word!

[class^="top"] {
  background: yellow;
}


CSS [attribute$="value"] Selector
The [attribute$="value"] selector is used to select elements whose attribute value ends with a specified value.

The following example selects all elements with a class attribute value that ends with "test":

Note: The value does not have to be a whole word!  

[class$="test"] {
  background: yellow;
}

CSS [attribute*="value"] Selector
The [attribute*="value"] selector is used to select elements whose attribute value contains a specified value.

The following example selects all elements with a class attribute value that contains "te":

Note: The value does not have to be a whole word!  

[class*="te"] {
  background: yellow;
}


Styling Forms
The attribute selectors can be useful for styling forms without class or ID:

 <div>
        <input type="text" />
        <br />
        <input type="number" />
    </div>

input[type="text"] {
  margin: auto;
  margin-top: 10px;
  display: block;
  width: 400px;
  height: 30px;
  border-radius: 16px;
  text-align: center;
  border-color: Tomato;
  border: 2px solid Tomato;
  color: Tomato;
}
input[type="number"] {
  margin: auto;
  display: block;
  width: 400px;
  height: 30px;
  border-radius: 16px;
  text-align: center;
  border-color: Tomato;
  outside-border: collapse;
  border: 2px solid Tomato;
  color: Tomato;
}